// src/services/publicApis.js
// Public APIs client for external data sources

import { clog, cerror } from '@/lib/utils';
import { getApiBase } from '@/utils/api';

/**
 * Fetch Israeli cities from government data portal
 * @returns {Promise<Array>} List of Israeli cities
 */
export async function getIsraeliCities() {
  clog('üèõÔ∏è PublicAPI: Fetching Israeli cities from data.gov.il');

  try {
    // First try direct API call to data.gov.il
    const params = new URLSearchParams({
      resource_id: 'b7cf8f14-64a2-4b33-8d4b-edb286fdbd37',
      limit: '1500'
    });

    const response = await fetch(`https://data.gov.il/api/action/datastore_search?${params}`, {
      method: 'GET',
      mode: 'cors'
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (!data.success || !data.result || !data.result.records) {
      throw new Error('Invalid response format from data.gov.il');
    }

    // Extract city names and remove duplicates
    const cities = data.result.records
      .map(record => record.◊©◊ù_◊ô◊©◊ï◊ë || record.city_name || record.name)
      .filter(city => city && typeof city === 'string')
      .map(city => city.trim())
      .filter(city => city.length > 0)
      // Remove duplicates and sort alphabetically
      .reduce((unique, city) => {
        if (!unique.includes(city)) {
          unique.push(city);
        }
        return unique;
      }, [])
      .sort((a, b) => a.localeCompare(b, 'he'));

    clog(`‚úÖ PublicAPI: Loaded ${cities.length} Israeli cities from data.gov.il`);
    return cities;

  } catch (error) {
    cerror('‚ùå PublicAPI: Direct API call failed:', error);

    // Fallback to backend proxy if direct call fails (CORS issues)
    try {
      clog('üîÑ PublicAPI: Trying backend proxy for Israeli cities');

      const proxyResponse = await fetch(`${getApiBase()}/public/israeli-cities`);

      if (!proxyResponse.ok) {
        throw new Error(`Backend proxy error! status: ${proxyResponse.status}`);
      }

      const proxyData = await proxyResponse.json();

      if (proxyData.success && proxyData.cities && Array.isArray(proxyData.cities)) {
        clog(`‚úÖ PublicAPI: Loaded ${proxyData.cities.length} Israeli cities via backend proxy`);
        return proxyData.cities;
      } else {
        throw new Error('Invalid response format from backend proxy');
      }

    } catch (proxyError) {
      cerror('‚ùå PublicAPI: Backend proxy also failed:', proxyError);

      // Return fallback list of major Israeli cities
      const fallbackCities = [
        '◊ô◊®◊ï◊©◊ú◊ô◊ù', '◊™◊ú ◊ê◊ë◊ô◊ë-◊ô◊§◊ï', '◊ó◊ô◊§◊î', '◊®◊ê◊©◊ï◊ü ◊ú◊¶◊ô◊ï◊ü', '◊ê◊©◊ì◊ï◊ì', '◊§◊™◊ó ◊™◊ß◊ï◊ï◊î',
        '◊ë◊ê◊® ◊©◊ë◊¢', '◊†◊™◊†◊ô◊î', '◊ó◊ï◊ú◊ï◊ü', '◊ë◊†◊ô ◊ë◊®◊ß', '◊®◊û◊™ ◊í◊ü', '◊ê◊©◊ß◊ú◊ï◊ü',
        '◊®◊ó◊ï◊ë◊ï◊™', '◊ë◊™ ◊ô◊ù', '◊î◊®◊¶◊ú◊ô◊î', '◊õ◊§◊® ◊°◊ë◊ê', '◊û◊ï◊ì◊ô◊¢◊ô◊ü-◊û◊õ◊ë◊ô◊ù-◊®◊¢◊ï◊™',
        '◊†◊¶◊®◊™', '◊®◊¢◊†◊†◊î', '◊†◊î◊®◊ô◊î', '◊ú◊ï◊ì', '◊®◊û◊ú◊î', '◊¶◊§◊™', '◊¢◊õ◊ï',
        '◊ß◊®◊ô◊ô◊™ ◊í◊™', '◊ß◊®◊ô◊ô◊™ ◊û◊ï◊¶◊ß◊ô◊ü', '◊ò◊ë◊®◊ô◊î', '◊¢◊§◊ï◊ú◊î', '◊ê◊ô◊ú◊™', '◊ò◊ô◊®◊™ ◊õ◊®◊û◊ú',
        '◊í◊ë◊¢◊™◊ô◊ô◊ù', '◊ß◊®◊ô◊ô◊™ ◊ê◊™◊ê', '◊û◊¢◊ú◊î ◊ê◊ì◊ï◊û◊ô◊ù', '◊ê◊ú◊¢◊ì', '◊ß◊®◊ô◊™ ◊ê◊ï◊†◊ï', '◊ô◊ë◊†◊î',
        '◊ß◊®◊ô◊™ ◊ë◊ô◊ê◊ú◊ô◊ß', '◊ß◊®◊ô◊™ ◊ô◊ù', '◊ê◊®◊ì', '◊õ◊®◊û◊ô◊ê◊ú', '◊ß◊ì◊ô◊û◊î-◊¶◊ï◊®◊ü', '◊ë◊ô◊™ ◊©◊û◊©',
        '◊†◊©◊®', '◊ê◊ï◊® ◊ô◊î◊ï◊ì◊î', '◊†◊° ◊¶◊ô◊ï◊†◊î', '◊ñ◊õ◊®◊ï◊ü ◊ô◊¢◊ß◊ë', '◊ß◊®◊ô◊™ ◊û◊ú◊ê◊õ◊ô',
        '◊ì◊ô◊û◊ï◊†◊î', '◊û◊í◊ì◊ú ◊î◊¢◊û◊ß', '◊†◊™◊ô◊ë◊ï◊™', '◊ê◊ï◊® ◊¢◊ß◊ô◊ë◊ê', '◊ô◊ß◊†◊¢◊ù ◊¢◊ô◊ú◊ô◊™',
        '◊ß◊ú◊†◊°◊ï◊ï◊î', '◊©◊§◊®◊¢◊ù', '◊î◊ï◊ì ◊î◊©◊®◊ï◊ü', '◊ë◊ô◊™◊® ◊¢◊ô◊ú◊ô◊™', '◊ê◊§◊®◊™◊î'
      ].sort((a, b) => a.localeCompare(b, 'he'));

      clog(`üîÑ PublicAPI: Using fallback cities list (${fallbackCities.length} cities)`);
      return fallbackCities;
    }
  }
}

/**
 * Generic function for fetching data from data.gov.il
 * @param {string} resourceId - The resource ID from data.gov.il
 * @param {Object} options - Additional options for the request
 * @returns {Promise<Array>} The fetched records
 */
export async function fetchDataGovIl(resourceId, options = {}) {
  clog(`üèõÔ∏è PublicAPI: Fetching data from data.gov.il resource: ${resourceId}`);

  try {
    // First try direct API call to data.gov.il
    const params = new URLSearchParams({
      resource_id: resourceId,
      limit: (options.limit || 1000).toString(),
      ...options.filters
    });

    const response = await fetch(`https://data.gov.il/api/action/datastore_search?${params}`, {
      method: 'GET',
      mode: 'cors'
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (!data.success || !data.result || !data.result.records) {
      throw new Error('Invalid response format from data.gov.il');
    }

    clog(`‚úÖ PublicAPI: Fetched ${data.result.records.length} records from data.gov.il`);
    return data.result.records;

  } catch (error) {
    cerror(`‚ùå PublicAPI: Direct API call failed for resource ${resourceId}:`, error);

    // Fallback to backend proxy if direct call fails (CORS issues)
    try {
      clog(`üîÑ PublicAPI: Trying backend proxy for resource: ${resourceId}`);

      const queryParams = new URLSearchParams({
        limit: (options.limit || 1000).toString(),
        ...options.filters
      });

      const proxyResponse = await fetch(`${getApiBase()}/public/data-gov-il/${resourceId}?${queryParams}`);

      if (!proxyResponse.ok) {
        throw new Error(`Backend proxy error! status: ${proxyResponse.status}`);
      }

      const proxyData = await proxyResponse.json();

      if (proxyData.success && proxyData.data && proxyData.data.records) {
        clog(`‚úÖ PublicAPI: Fetched ${proxyData.data.records.length} records via backend proxy`);
        return proxyData.data.records;
      } else {
        throw new Error('Invalid response format from backend proxy');
      }

    } catch (proxyError) {
      cerror(`‚ùå PublicAPI: Backend proxy also failed for resource ${resourceId}:`, proxyError);
      throw proxyError;
    }
  }
}

/**
 * Cache for API responses to avoid repeated requests
 */
const apiCache = new Map();

/**
 * Cached version of getIsraeliCities - fetches once per session
 * @returns {Promise<Array>} List of Israeli cities
 */
export async function getCachedIsraeliCities() {
  const cacheKey = 'israeli_cities';

  if (apiCache.has(cacheKey)) {
    clog('üìã PublicAPI: Using cached Israeli cities');
    return apiCache.get(cacheKey);
  }

  const cities = await getIsraeliCities();
  apiCache.set(cacheKey, cities);
  return cities;
}